{"version":3,"sources":["actions/actions.js","api/api.js","actions/types.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundry.js","components/MainPage.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","ErrorBoundry","hasError","info","MainPage","filterRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","App","connect","searchRobots","e","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.00d8506b.chunk.js","sourcesContent":["import { apiCall } from '../api/api';\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './types'\n\n\nexport const setSearchField = (text) => ({\n   type: CHANGE_SEARCHFIELD, \n   payload: text \n  })\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://cors-anywhere.herokuapp.com/jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport { shallow, mount, render } from 'enzyme';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        aria-label=\"Search Robots\"\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor() {\n    super(); \n    this.state = {\n      count: 0\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false; \n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return { count: this.state.count + 1}\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <button id=\"counter\" color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\n      </div>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return false;\n  // }\n\n  render() {\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1> \n        <CounterButton color={'red'} />      \n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor() {\n    super(); \n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      hasError: true\n    })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div>\n          <h1>Oooopps. That is not good.</h1>\n        </div>\n      )\n    }\n      return this.props.children\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './MainPage.css';\n\n\nclass MainPage extends Component {\n  \n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filterRobots = () => {\n    return this.props.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n    })\n  }\n\n  render() {\n    const { onSearchChange, robots, isPending } = this.props;      \n    return (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundry>\n              <CardList robots={this.filterRobots(robots)} />\n            </ErrorBoundry>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux'\nimport { setSearchField, requestRobots } from '../actions/actions';\nimport MainPage from '../components/MainPage';\n\nclass App extends Component {\n  render() {\n    return(\n      <MainPage {...this.props} />\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (e) => dispatch(setSearchField(e.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n   \nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './actions/types';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: false\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload})\n    default:\n      return state\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { requestRobots, searchRobots } from './reducers'\n\nimport './index.css';\n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}